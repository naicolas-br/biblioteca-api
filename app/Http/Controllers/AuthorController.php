<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreAuthorRequest;
use App\Http\Requests\UpdateAuthorRequest;
use App\Http\Resources\AuthorResource;
use App\Http\Resources\BookResource;
use App\Http\Resources\PaginatedResource;
use App\Models\Author;
use Illuminate\Http\Request;

class AuthorController extends Controller
{
    /**
     * üìã TODO: Implementar listagem de autores
     * 
     * Funcionalidades esperadas:
     * - Pagina√ß√£o (15 itens por p√°gina por padr√£o)
     * - Busca por nome (?q=nome)
     * - Ordena√ß√£o (?sort=nome)
     * - Normaliza√ß√£o de par√¢metros inv√°lidos
     * 
     * Resposta esperada: PaginatedResource com AuthorResource
     * Status: 200 OK
     */
    public function index(Request $request) {
        // Normaliza o n√∫mero de itens por p√°gina, garantindo que esteja entre 1 e 100.
        $perPage = max(1, min(100, (int) $request->input('per_page', 15)));

        //Inicia a query e aplica os scopes de busca e ordena√ß√£o
        $authors = Author::query()
            ->search($request->input('q')) // Usa o scope de busca
            ->applyOrder($request->input('sort'), $request->input('direction')) // Usa o scope de ordena√ß√£o
            ->paginate($perPage)
            ->withQueryString(); // Adiciona os par√¢metros da request atual aos links de pagina√ß√£o

        //Retorna a cole√ß√£o de autores paginada e formatada pelo Resource
        return new PaginatedResource(AuthorResource::collection($authors));
    }

    /**
     * üìã TODO: Implementar cria√ß√£o de autor
     * 
     * Funcionalidades esperadas:
     * - Valida√ß√£o autom√°tica via StoreAuthorRequest
     * - Cria√ß√£o do autor no banco
     * - Resposta formatada com AuthorResource
     * 
     * Status: 201 Created
     * Status: 422 Unprocessable Entity (valida√ß√£o)
     */
    public function store(StoreAuthorRequest $request)
    {
        // Os dados j√° foram validados pelo StoreAuthorRequest.
        // O m√©todo validated() retorna um array apenas com os dados 
        // que passaram nas regras de valida√ß√£o ('nome' e 'bio').
        $author = Author::create($request->validated());

        // Retorna o novo autor, formatado pelo AuthorResource,
        // e define o c√≥digo de status HTTP para 201 Created.
        return (new AuthorResource($author))
                ->response()
                ->setStatusCode(201);
    }

    /**
     * üìã TODO: Implementar busca de autor por ID
     * 
     * Funcionalidades esperadas:
     * - Buscar autor por ID
     * - Retornar 404 se n√£o encontrado
     * - Resposta formatada com AuthorResource
     * 
     * Status: 200 OK
     * Status: 404 Not Found
     */
    public function show($id) {
        // Use findOrFail para buscar o autor pelo ID.
        // Se o autor n√£o for encontrado, o Laravel automaticamente
        // lan√ßar√° uma exce√ß√£o que resulta em uma resposta 404 Not Found.
        $author = Author::findOrFail($id);

        // Se o autor for encontrado, retorne-o formatado pelo AuthorResource.
        // O status 200 OK √© o padr√£o para respostas bem-sucedidas.
        return new AuthorResource($author);
    }

    /**
     * üìã TODO: Implementar atualiza√ß√£o de autor
     * 
     * Funcionalidades esperadas:
     * - Valida√ß√£o autom√°tica via UpdateAuthorRequest
     * - Atualiza√ß√£o do autor no banco
     * - Retornar 404 se n√£o encontrado
     * - Resposta formatada com AuthorResource
     * 
     * Status: 200 OK
     * Status: 404 Not Found
     * Status: 422 Unprocessable Entity (valida√ß√£o)
     */
    public function update(UpdateAuthorRequest $request, $id)
    {
        // 1. Busca o autor pelo ID. Se n√£o encontrar, retorna 404 automaticamente.
        $author = Author::findOrFail($id);

        // 2. A valida√ß√£o j√° foi feita pelo UpdateAuthorRequest.
        //    O m√©todo validated() retorna os dados que passaram na valida√ß√£o.
        $validatedData = $request->validated();

        // 3. Atualiza o autor no banco de dados com os dados validados.
        $author->update($validatedData);

        // 4. Retorna o autor com os dados atualizados, formatado pelo Resource.
        return new AuthorResource($author);
    }

    /**
     * üìã TODO: Implementar exclus√£o de autor
     * 
     * ‚ö†Ô∏è REGRA DE NEG√ìCIO IMPORTANTE:
     * - N√ÉO pode excluir autor que tem livros associados
     * - Deve retornar 409 Conflict nesse caso
     * - Se n√£o tem livros, pode excluir (204 No Content)
     * 
     * Status: 204 No Content (sucesso)
     * Status: 404 Not Found (autor n√£o existe)
     * Status: 409 Conflict (autor tem livros)
     */
    public function destroy($id)
    {
        // 1. Busca o autor pelo ID. Se n√£o encontrar, retorna 404 automaticamente.
        $author = Author::findOrFail($id);

        // 2. Verifica se o autor possui algum livro associado.
        // O m√©todo has('books') √© uma forma eficiente de fazer essa verifica√ß√£o.
        if ($author->books()->exists()) {
            // 3. Se tiver livros, retorna um erro 409 Conflict com uma mensagem clara.
            return response()->json([
                'message' => 'N√£o √© poss√≠vel excluir o autor, pois ele possui livros associados.'
            ], 409);
        }

        // 4. Se n√£o tiver livros, prossegue com a exclus√£o.
        $author->delete();

        // 5. Retorna uma resposta 204 No Content, que √© o padr√£o para exclus√µes bem-sucedidas.
        return response()->noContent();
    }

    /**
     * üìã TODO: Implementar listagem de livros do autor
     * 
     * Funcionalidades esperadas:
     * - Buscar autor por ID
     * - Listar livros do autor com pagina√ß√£o
     * - Retornar 404 se autor n√£o existe
     * - Resposta formatada com PaginatedResource
     * 
     * Status: 200 OK
     * Status: 404 Not Found
     */
    public function books($id, Request $request)
    {
        // 1. Busca o autor pelo ID. Se n√£o encontrar, retorna 404 automaticamente.
        $author = Author::findOrFail($id);

        // 2. Normaliza os par√¢metros de pagina√ß√£o, como fizemos no index.
        $perPage = max(1, min(100, (int) $request->input('per_page', 15)));

        // 3. Acessa o relacionamento 'books()' do autor para obter uma query
        //    e ent√£o aplica a pagina√ß√£o.
        $books = $author->books()->paginate($perPage);

        // 4. Retorna a cole√ß√£o de livros paginada, formatada pelo PaginatedResource
        //    que por sua vez usar√° o BookResource para cada livro.
        return new PaginatedResource(BookResource::collection($books));
    }
}